# 최상단에 기본 환경변수 앵커 추가 (추가)
x-default-env: &default_env
  TZ: ${TIMEZONE}

services:
  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app # Dockerfile에서 /app 경로를 사용하는지 확인하세요.
    ports:
      - '5173:5173'
    environment:
      <<: *default_env
      NODE_ENV: development
    command: npm run dev -- --host # 수정: 올바른 배열 형식 사용
    healthcheck: # 추가: frontend healthcheck
      test: ['CMD', 'curl', '-f', 'http://localhost:5173']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  backend:
    build:
      context: ./backend
    ports:
      - '8000:8000'
    environment:
      <<: *default_env
      DJANGO_DEBUG: 'True'
      PYTHONUNBUFFERED: '1' # Python 로그 버퍼링 비활성화
      ALLOWED_HOSTS: 'localhost,127.0.0.1,backend,*' # 모든 호스트 허용
    volumes:
      - ./backend:/app
      - static_volume:/app/static
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health/']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s # 시작 시간 여유 증가
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network
    labels:
      - 'custom.name=backend'
    command: python manage.py runserver 0.0.0.0:8000 # gunicorn 대신 개발 서버 사용

  nginx:
    build:
      context: ./nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro # 설정 파일 마운트 확인
      - ./frontend/dist:/usr/share/nginx/html:ro # 추가: 정적 파일 서빙 경로 바인딩
      - static_volume:/usr/src/app/static # 추가: Django 정적 파일 경로 바인딩
    depends_on:
      # frontend:  # 제거: frontend 의존성 무시
      #   condition: service_healthy
      backend:
        condition: service_started # (또는 필요 시 service_healthy)
    restart: unless-stopped
    networks:
      - app_network
    command: ['nginx-debug', '-g', 'daemon off;'] # 디버그 모드로 실행
    environment:
      <<: *default_env
      FRONTEND_HOST: frontend # 추가: nginx가 사용할 frontend 호스트

  db:
    build: ./db
    user: '999:999'
    volumes:
      - db_data_volume:/var/lib/postgresql/data/
    environment:
      <<: *default_env
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    expose:
      - '5432'
    ports:
      - '5432:5432'

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    env_file:
      - .env
    command: ['postgres', '-c', 'timezone=Asia/Seoul']

    networks:
      - app_network

  redis:
    image: redis:alpine
    expose:
      - '6379' # 내부 통신용이므로 expose만 필요
    environment:
      <<: *default_env

  celery_worker:
    build:
      context: ./backend
    command: celery -A config worker -l info --concurrency=2
    volumes:
      - ./backend:/app
    environment:
      <<: *default_env
      DJANGO_DEBUG: 'False'
      CELERY_BROKER_URL: 'amqp://guest:guest@rabbitmq:5672//'
    env_file:
      - .env
    depends_on:
      - backend
      - redis
    restart: always
    networks:
      - app_network

  celery_beat:
    build:
      context: ./backend
    command: celery -A config beat -l info
    volumes:
      - ./backend:/app
    environment:
      <<: *default_env
      DJANGO_DEBUG: 'False'
      CELERY_BROKER_URL: 'amqp://guest:guest@rabbitmq:5672//'
    env_file:
      - .env
    depends_on:
      - backend
      - redis
      - rabbitmq # 추가된 항목
    restart: always
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - '5672:5672' # AMQP 포트
      - '15672:15672' # 관리 콘솔 포트
    networks:
      - app_network
    environment:
      <<: *default_env

volumes:
  static_volume:
  db_data_volume:

networks:
  app_network:
    driver: bridge
