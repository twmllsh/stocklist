# Generated by Django 5.1.1 on 2025-02-08 16:24

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Recommend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=30)),
                ('recommend_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('change', models.FloatField(blank=True, null=True)),
                ('valid', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': '테마',
                'verbose_name_plural': '테마 목록',
            },
        ),
        migrations.CreateModel(
            name='Ticker',
            fields=[
                ('code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('구분', models.CharField(max_length=10)),
                ('create_at', models.DateField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Ticker',
                'verbose_name_plural': 'Tickers',
            },
        ),
        migrations.CreateModel(
            name='ThemeDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('theme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.theme')),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='themedtail_set', to='api.ticker')),
            ],
            options={
                'verbose_name': '테마텍스트',
                'verbose_name_plural': '테마텍스트 목록',
                'unique_together': {('ticker', 'theme')},
            },
        ),
        migrations.AddField(
            model_name='theme',
            name='tickers',
            field=models.ManyToManyField(related_name='theme_set', through='api.ThemeDetail', to='api.ticker'),
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('상장주식수', models.FloatField(null=True)),
                ('외국인한도주식수', models.FloatField(null=True)),
                ('외국인보유주식수', models.FloatField(null=True)),
                ('외국인소진율', models.FloatField(null=True)),
                ('액면가', models.FloatField(null=True)),
                ('ROE', models.FloatField(null=True)),
                ('EPS', models.FloatField(null=True)),
                ('PER', models.FloatField(null=True)),
                ('PBR', models.FloatField(null=True)),
                ('주당배당금', models.FloatField(null=True)),
                ('배당수익율', models.FloatField(blank=True, null=True)),
                ('구분', models.CharField(blank=True, max_length=7, null=True)),
                ('업종', models.CharField(blank=True, max_length=20, null=True)),
                ('FICS', models.CharField(blank=True, max_length=20, null=True)),
                ('시가총액', models.FloatField(null=True)),
                ('시가총액순위', models.PositiveBigIntegerField(null=True)),
                ('외국인보유비중', models.FloatField(null=True)),
                ('유동주식수', models.FloatField(null=True)),
                ('유동비율', models.FloatField(null=True)),
                ('보통발행주식수', models.FloatField(null=True)),
                ('우선발행주식수', models.FloatField(null=True)),
                ('PER_12M', models.FloatField(null=True)),
                ('배당수익률', models.FloatField(null=True)),
                ('동일업종저per_name', models.CharField(blank=True, max_length=30)),
                ('동일업종저per_code', models.CharField(max_length=10)),
                ('ticker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.ticker')),
            ],
            options={
                'verbose_name': '기본정보',
                'verbose_name_plural': '기본정보 목록',
            },
        ),
        migrations.CreateModel(
            name='ChartValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(null=True)),
                ('cur_close', models.FloatField(blank=True, null=True)),
                ('cur_open', models.FloatField(blank=True, null=True)),
                ('pre_close', models.FloatField(blank=True, null=True)),
                ('pre_open', models.FloatField(blank=True, null=True)),
                ('growth_y1', models.FloatField(blank=True, null=True)),
                ('growth_y2', models.FloatField(blank=True, null=True)),
                ('growth_q', models.FloatField(blank=True, null=True)),
                ('good_buy', models.IntegerField(blank=True, null=True)),
                ('chart_d_bb60_upper20', models.FloatField(blank=True, null=True)),
                ('chart_d_bb60_upper10', models.FloatField(blank=True, null=True)),
                ('chart_d_bb60_upper', models.FloatField(blank=True, null=True)),
                ('chart_d_bb60_width', models.FloatField(blank=True, null=True)),
                ('chart_d_bb240_upper20', models.FloatField(blank=True, null=True)),
                ('chart_d_bb240_upper10', models.FloatField(blank=True, null=True)),
                ('chart_d_bb240_upper', models.FloatField(blank=True, null=True)),
                ('chart_d_bb240_width', models.FloatField(blank=True, null=True)),
                ('chart_d_sun_width', models.FloatField(blank=True, null=True)),
                ('chart_d_sun_max', models.FloatField(blank=True, null=True)),
                ('chart_d_new_phase', models.BooleanField(null=True)),
                ('chart_d_ab', models.BooleanField(null=True)),
                ('chart_d_ab_v', models.BooleanField(null=True)),
                ('chart_d_good_array', models.BooleanField(null=True)),
                ('chart_d_bad_array', models.BooleanField(null=True)),
                ('cur_vol', models.FloatField(blank=True, null=True)),
                ('pre_vol', models.FloatField(blank=True, null=True)),
                ('chart_d_vol20', models.FloatField(blank=True, null=True)),
                ('vol20', models.FloatField(blank=True, null=True)),
                ('reasons', models.TextField(blank=True)),
                ('reasons_30', models.TextField(blank=True)),
                ('chart_30_bb60_upper20', models.FloatField(blank=True, null=True)),
                ('chart_30_bb60_upper10', models.FloatField(blank=True, null=True)),
                ('chart_30_bb60_upper', models.FloatField(blank=True, null=True)),
                ('chart_30_bb60_width', models.FloatField(blank=True, null=True)),
                ('chart_30_bb240_upper20', models.FloatField(blank=True, null=True)),
                ('chart_30_bb240_upper10', models.FloatField(blank=True, null=True)),
                ('chart_30_bb240_upper', models.FloatField(blank=True, null=True)),
                ('chart_30_bb240_width', models.FloatField(blank=True, null=True)),
                ('chart_30_sun_width', models.FloatField(blank=True, null=True)),
                ('chart_30_sun_max', models.FloatField(blank=True, null=True)),
                ('chart_30_new_phase', models.BooleanField(null=True)),
                ('chart_30_ab', models.BooleanField(null=True)),
                ('chart_30_ab_v', models.BooleanField(null=True)),
                ('chart_30_good_array', models.BooleanField(null=True)),
                ('chart_30_bad_array', models.BooleanField(null=True)),
                ('chart_30_vol20', models.FloatField(blank=True, null=True)),
                ('chart_5_bb60_upper20', models.FloatField(blank=True, null=True)),
                ('chart_5_bb60_upper10', models.FloatField(blank=True, null=True)),
                ('chart_5_bb60_upper', models.FloatField(blank=True, null=True)),
                ('chart_5_bb60_width', models.FloatField(blank=True, null=True)),
                ('chart_5_bb240_upper20', models.FloatField(blank=True, null=True)),
                ('chart_5_bb240_upper10', models.FloatField(blank=True, null=True)),
                ('chart_5_bb240_upper', models.FloatField(blank=True, null=True)),
                ('chart_5_bb240_width', models.FloatField(blank=True, null=True)),
                ('chart_5_sun_width', models.FloatField(blank=True, null=True)),
                ('chart_5_sun_max', models.FloatField(blank=True, null=True)),
                ('chart_5_new_phase', models.BooleanField(null=True)),
                ('chart_5_ab', models.BooleanField(null=True)),
                ('chart_5_ab_v', models.BooleanField(null=True)),
                ('chart_5_good_array', models.BooleanField(null=True)),
                ('chart_5_bad_array', models.BooleanField(null=True)),
                ('chart_5_vol20', models.FloatField(blank=True, null=True)),
                ('유보율', models.FloatField(blank=True, null=True)),
                ('부채비율', models.FloatField(blank=True, null=True)),
                ('액면가', models.FloatField(blank=True, null=True)),
                ('cash_value', models.FloatField(blank=True, null=True)),
                ('EPS', models.FloatField(blank=True, null=True)),
                ('상장주식수', models.FloatField(blank=True, null=True)),
                ('유동주식수', models.FloatField(blank=True, null=True)),
                ('매물대1', models.FloatField(blank=True, null=True)),
                ('매물대2', models.FloatField(blank=True, null=True)),
                ('신규상장', models.BooleanField(null=True)),
                ('ticker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.ticker')),
            ],
        ),
        migrations.CreateModel(
            name='Upjong',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('tickers', models.ManyToManyField(related_name='upjong_set', to='api.ticker')),
            ],
            options={
                'verbose_name': '업종',
                'verbose_name_plural': '업종 목록',
            },
        ),
        migrations.CreateModel(
            name='Ohlcv',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Date', models.DateField()),
                ('Open', models.FloatField()),
                ('High', models.FloatField()),
                ('Low', models.FloatField()),
                ('Close', models.FloatField()),
                ('Volume', models.BigIntegerField()),
                ('Amount', models.BigIntegerField(null=True)),
                ('Change', models.FloatField(null=True)),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ticker')),
            ],
            options={
                'verbose_name': 'OHLCV',
                'ordering': ['Date'],
                'unique_together': {('ticker', 'Date')},
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no', models.BigIntegerField()),
                ('title', models.CharField(max_length=200)),
                ('createdAt', models.DateTimeField()),
                ('writerName', models.CharField(max_length=20)),
                ('tickers', models.ManyToManyField(related_name='news_set', to='api.ticker')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('title', 'createdAt'), name='unique_title_createdAt')],
            },
        ),
        migrations.CreateModel(
            name='Iss',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issn', models.IntegerField()),
                ('iss_str', models.CharField(max_length=50)),
                ('hl_str', models.CharField(max_length=200)),
                ('regdate', models.DateField()),
                ('ralated_codes', models.CharField(max_length=200)),
                ('ralated_code_names', models.CharField(max_length=200)),
                ('hl_cont_text', models.TextField()),
                ('hl_cont_url', models.CharField(max_length=200, unique=True)),
                ('tickers', models.ManyToManyField(related_name='iss_set', to='api.ticker')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('iss_str', 'regdate'), name='unique_iss_str_regdate')],
            },
        ),
        migrations.CreateModel(
            name='InvestorTrading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('날짜', models.DateField()),
                ('투자자', models.CharField(choices=[('개인', '개인'), ('외국인', '외국인'), ('기관합계', '기관합계'), ('금융투자', '금융투자'), ('보험', '보험'), ('은행', '은행'), ('투신', '투신'), ('사모', '사모'), ('연기금', '연기금'), ('기타법인', '기타법인'), ('기타금융', '기타금융'), ('기타외국인', '기타외국인')], max_length=50)),
                ('매도거래량', models.BigIntegerField()),
                ('매수거래량', models.BigIntegerField()),
                ('순매수거래량', models.BigIntegerField(null=True)),
                ('매도거래대금', models.BigIntegerField()),
                ('매수거래대금', models.BigIntegerField()),
                ('순매수거래대금', models.BigIntegerField(null=True)),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ticker')),
            ],
            options={
                'verbose_name': '투자자',
                'verbose_name_plural': '투자자 목록',
                'indexes': [models.Index(fields=['ticker', '-날짜', '투자자'], name='api_investo_ticker__7d0760_idx')],
                'unique_together': {('ticker', '날짜', '투자자')},
            },
        ),
        migrations.CreateModel(
            name='Finstats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fintype', models.CharField(choices=[('연결연도', '연결연도'), ('연결분기', '연결분기'), ('별도연도', '별도연도'), ('별도분기', '별도분기')], max_length=4)),
                ('year', models.IntegerField()),
                ('quarter', models.IntegerField()),
                ('매출액', models.FloatField(blank=True, null=True)),
                ('영업이익', models.FloatField(blank=True, null=True)),
                ('영업이익발표기준', models.FloatField(blank=True, null=True)),
                ('당기순이익', models.FloatField(blank=True, null=True)),
                ('자산총계', models.FloatField(blank=True, null=True)),
                ('부채총계', models.FloatField(blank=True, null=True)),
                ('자본총계', models.FloatField(blank=True, null=True)),
                ('자본금', models.FloatField(blank=True, null=True)),
                ('부채비율', models.FloatField(blank=True, null=True)),
                ('유보율', models.FloatField(blank=True, null=True)),
                ('영업이익률', models.FloatField(blank=True, null=True)),
                ('순이익률', models.FloatField(blank=True, null=True)),
                ('ROA', models.FloatField(blank=True, null=True)),
                ('ROE', models.FloatField(blank=True, null=True)),
                ('EPS', models.FloatField(blank=True, null=True)),
                ('BPS', models.FloatField(blank=True, null=True)),
                ('DPS', models.FloatField(blank=True, null=True)),
                ('PER', models.FloatField(blank=True, null=True)),
                ('PBR', models.FloatField(blank=True, null=True)),
                ('발행주식수', models.FloatField(blank=True, null=True)),
                ('배당수익률', models.FloatField(blank=True, null=True)),
                ('지배주주순이익', models.FloatField(blank=True, null=True)),
                ('비지배주주순이익', models.FloatField(blank=True, null=True)),
                ('지배주주지분', models.FloatField(blank=True, null=True)),
                ('비지배주주지분', models.FloatField(blank=True, null=True)),
                ('지배주주순이익률', models.FloatField(blank=True, null=True)),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ticker')),
            ],
            options={
                'verbose_name': '재무제표',
                'verbose_name_plural': '재무제표 목록',
                'ordering': ['year', 'quarter'],
                'unique_together': {('ticker', 'fintype', 'year', 'quarter')},
            },
        ),
        migrations.CreateModel(
            name='ChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_date', models.DateTimeField(auto_now_add=True)),
                ('change_field', models.CharField(max_length=30)),
                ('gb', models.CharField(max_length=20, null=True)),
                ('old_value', models.FloatField(null=True)),
                ('new_value', models.FloatField(null=True)),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ticker')),
            ],
            options={
                'verbose_name': '데이터 변경',
                'verbose_name_plural': '데이터변경 목록',
                'ordering': ['change_date', 'change_field'],
                'unique_together': {('ticker', 'change_date', 'change_field')},
            },
        ),
        migrations.CreateModel(
            name='BrokerTrading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('broker_name', models.CharField(max_length=100, null=True)),
                ('buy', models.BigIntegerField(null=True)),
                ('sell', models.BigIntegerField(null=True)),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ticker')),
            ],
            options={
                'verbose_name': '거래원',
                'verbose_name_plural': '거래원 목록',
                'ordering': ['-date'],
                'unique_together': {('ticker', 'date', 'broker_name')},
            },
        ),
    ]
